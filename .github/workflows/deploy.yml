# Sample workflow for building and deploying a Next.js site to Cpanel
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Cpanel

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    name: Build default
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18.20.6"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Update env with secrets
        run: |
          touch .env.production
          echo "# environment config" > .env.production
          echo MONGO_URL=${{ secrets.MONGO_URL }} >> .env.production
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env.production

      - name: Build with Next.js
        env:
          BUILD_TYPE: server side application
        run: |
          echo "Building for $BUILD_TYPE"
          ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./

  build-static-site:
    name: Build static site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18.20.6"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        env:
          BUILD_TYPE: static
        run: |
          echo "Building $BUILD_TYPE"
          ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-static-artifacts
          path: ./out

      - name: Upload artifact for Gitbub pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy-dockerhub:
    name: Build Publish docker image to docker hub (nicoswan/nicoswan-com)
    runs-on: ubuntu-latest
    environment: production
    needs: build
    steps:
      - name: Download standalone build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: nicoswan/nicoswan-com:latest

  deploy-kubernetes:
    name: Deploy to Kubernetes cygnus-labs.com
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-dockerhub

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y gettext-base  && sudo apt-get clean && sudo rm -rf /var/lib/apt/lists/*

      - name: Template update
        env:
          CI_PROJECT_NAME: nicoswan-com
        run: |
          envsubst < ./deploy/deploy.tmpl > ./deploy.yaml
          cat ./deploy.yaml
   
      - name: Deploy kubernetes
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f ./deploy.yaml --validate=false

      - name: Check rollout status
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: rollout status deployment/nicoswan-com                   


  build-standalone:
    name: Build standalone
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18.20.6"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Update env with secrets
        run: |
          touch .env.production
          echo "# environment config" > .env.production
          echo MONGO_URL=${{ secrets.MONGO_URL }} >> .env.production
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env.production

      - name: Build with Next.js
        env:
          BUILD_TYPE: standalone
        run: |
          echo "Building for $BUILD_TYPE"
          ${{ steps.detect-package-manager.outputs.runner }} next build && tsc --project tsconfig.standalone.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-standalone-artifacts
          path: |
            ./_next
            ./node_modules
            ./server.js
            ./package.json
            ./package-lock.json
            ./public
            ./next.config.ts

  # Deployment job cygnus hosting cpanel node application
  deploy-cyngus-hosting:
    name: Deploy to cygnus-hosting
    runs-on: ubuntu-latest
    environment: production
    needs: build-standalone
    steps:
      - name: Download standalone build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-standalone-artifacts

      - name: Deploy to cPanel via FTP
        id: deployment
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: /home/nicoswan/website-next-app/
          protocol: ftp
          timeout: 300000

  # Deployment job to github pages
  deploy-github-pages:
    name: Deploy to Github pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-static-site
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # # Deployment job
  # deploy-cyngus-lab:
  #   runs-on: ubuntu-latest
  #   environment: production
  #   needs: build
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: ./

  #     - name: Deploy to cygnus-labs.com kubernetes
  #       uses: appleboy/ssh-action@v1.2.0
  #       with:
  #         host: ${{ secrets.SSH_HOST }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.SSH_DEPLOYER_PRIVATE_KEY }}
  #         port: ${{ secrets.SSH_PORT }}
  #         script: whoami
